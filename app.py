# -*- coding: utf-8 -*-
"""GCP.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mr7eYs1wORNswHObAutUZr2M6e9i2vf0
"""

# app.py
import streamlit as st
import pandas as pd
import numpy as np
import yfinance as yf
import time

# ---- Helper: Safe Yahoo Finance Fetch ----
def safe_fetch(tickers, start, end, retries=3, delay=2):
    for attempt in range(retries):
        try:
            data = yf.download(tickers, start=start, end=end, progress=False)
            if not data.empty:
                return data
        except Exception as e:
            st.error(f"Fetch attempt {attempt+1} failed: {e}")
        time.sleep(delay)
    return pd.DataFrame()  # Return empty if failed

# ---- Streamlit App ----
st.title("Dynamic Portfolio Recommender")

# Example Input Section
risk_profile = st.selectbox("Select Risk Profile", ["Low", "Medium", "High"])
start_date = "2020-01-01"
end_date = "2023-12-31"

if st.button("Build Dynamic Universe"):
    with st.spinner("Fetching market data..."):
        benchmark_tickers = ["ACWI", "^GSPC", "^FTSE"]
        benchmark_data = safe_fetch(benchmark_tickers, start_date, end_date)

    if benchmark_data.empty:
        st.error("Universe build failed: Could not fetch benchmark data. Possible reasons: "
                 "Yahoo Finance restriction, network issue, or invalid ticker.")
    else:
        st.success("Benchmark data fetched successfully!")
        st.dataframe(benchmark_data.head())  # Debug view

        # ---- Your Existing Logic for Universe Build ----
        # Candidate equities filtering example:
        equities = ["AAPL", "MSFT", "GOOGL", "AMZN"]
        equities_data = safe_fetch(equities, start_date, end_date)

        if equities_data.empty:
            st.warning("No equities matched your beta range. Try a different risk profile.")
        else:
            st.write("Candidate Equities Found:")
            st.dataframe(equities_data.head())

        # ---- Debt ETFs Example ----
        debt_etfs = ["BND", "AGG"]
        debt_data = safe_fetch(debt_etfs, start_date, end_date)

        if debt_data.empty:
            st.warning("No bond ETFs found this run. Try again later.")
        else:
            st.write("Debt ETFs Found:")
            st.dataframe(debt_data.head())
