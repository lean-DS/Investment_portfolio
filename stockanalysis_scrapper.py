# -*- coding: utf-8 -*-
"""Stockanalysis_scrapper.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mr7eYs1wORNswHObAutUZr2M6e9i2vf0
"""

# stockanalysis_scraper.py
# stockanalysis_scraper.py
import re
import time
from typing import Dict, Iterable, List, Optional, Tuple
from urllib.parse import urljoin
from urllib import robotparser

import requests
from bs4 import BeautifulSoup

BASE = "https://stockanalysis.com"
SITEMAP_INDEX = urljoin(BASE, "/sitemap.xml")

_session = requests.Session()
_session.headers.update({
    "User-Agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 "
                  "(KHTML, like Gecko) Chrome/126.0 Safari/537.36",
    "Accept-Language": "en-US,en;q=0.9",
    "Accept": "text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8",
})
DEFAULT_TIMEOUT = 12

# ----------------- helpers -----------------
def _get(url: str) -> Optional[requests.Response]:
    try:
        r = _session.get(url, timeout=DEFAULT_TIMEOUT)
        if r.status_code == 200:
            return r
    except Exception:
        pass
    return None

def _iter_sitemaps() -> List[str]:
    r = _get(SITEMAP_INDEX)
    if not r:
        return []
    soup = BeautifulSoup(r.text, "xml")
    return [loc.get_text(strip=True) for loc in soup.find_all("loc")]

# ticker-like slugs only
_TICKER_RE = re.compile(r"^[A-Za-z][A-Za-z0-9.\-]{0,9}$")
_DENY = {
    "SCREENER","COMPARE","INDUSTRY","EARNINGS-CALENDAR","MARKETS","NEWS",
    "PROVIDER","ECONOMY","INSIGHTS","LEARN","DIVIDENDS","IPO","LISTS","IDEAS",
    "ETFS","SECTORS","INDEX","BLOG","ABOUT","CONTACT","JOBS","BROKERS","TOOLS"
}

def _extract_symbols_from_sitemap(sitemap_url: str, max_take: Optional[int]=None) -> List[Tuple[str, str]]:
    r = _get(sitemap_url)
    if not r:
        return []
    soup = BeautifulSoup(r.text, "xml")
    out: List[Tuple[str, str]] = []
    for loc in soup.find_all("loc"):
        url = loc.get_text(strip=True)
        m = re.search(r"https?://stockanalysis\.com/(stocks|etf)/([A-Za-z0-9.\-]+)/?$", url)
        if not m:
            continue
        kind, raw = m.group(1), m.group(2).upper()
        sym = raw.replace("/", "").upper()
        if sym in _DENY:
            continue
        if not _TICKER_RE.fullmatch(sym):
            continue
        out.append((sym, kind))  # kind in {'stocks','etf'}
        if max_take and len(out) >= max_take:
            break
    return out

def fetch_all_symbols_from_sitemaps(types: Iterable[str] = ("stock","etf"),
                                    max_per_type: int = 5000,
                                    max_sitemaps: int = 10) -> Dict[str, List[str]]:
    sitemaps = _iter_sitemaps()
    stocks: List[str] = []
    etfs: List[str] = []
    for sm in sitemaps[:max_sitemaps]:
        time.sleep(0.3)
        pairs = _extract_symbols_from_sitemap(sm)
        for sym, kind in pairs:
            if kind == "stocks" and "stock" in types:
                if sym not in stocks:
                    stocks.append(sym)
            elif kind == "etf" and "etf" in types:
                if sym not in etfs:
                    etfs.append(sym)
        if len(stocks) >= max_per_type and len(etfs) >= max_per_type:
            break
    return {"stock": stocks[:max_per_type], "etf": etfs[:max_per_type]}

# ----------------- UK EPIC lists (LSE + AIM) -----------------
UK_LIST_PAGES = [
    "/list/london-stock-exchange/",
    "/list/london-stock-exchange-aim/",
]

def fetch_uk_epics_from_lists(max_pages: int = 2) -> List[str]:
    epics: set[str] = set()
    for path in UK_LIST_PAGES[:max_pages]:
        r = _get(urljoin(BASE, path))
        if not r:
            continue
        soup = BeautifulSoup(r.text, "lxml")

        # Prefer /quote/lon/<EPIC>/
        for a in soup.select("a[href]"):
            href = a["href"]
            m = re.search(r"/quote/(?:lon|lse)/([A-Za-z0-9.\-]+)/", href, flags=re.IGNORECASE)
            if m:
                epics.add(m.group(1).upper())

        # Fallback: 1â€“5 letters that look like EPICs
        for td in soup.select("td"):
            t = td.get_text(strip=True).upper()
            if re.fullmatch(r"[A-Z]{1,5}(\.[A-Z])?", t):
                epics.add(t)

        time.sleep(0.2)
    return sorted(epics)
